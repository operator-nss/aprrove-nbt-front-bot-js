import { Bot, InlineKeyboard } from 'grammy';
import dotenv from 'dotenv';
import { checkMr, getEveningMessage, getRandomElements, getRandomMessage } from './helpers.js';
import { manyMrPhrases } from './constants.js';
import axiosInstance from './axiosInstance.js';
import * as fs from 'fs';
import path from 'path';

dotenv.config();

const TOKEN = process.env.BOT_API_KEY; // –¢–æ–∫–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç–∞
const ADMINS_IDS = process.env.ADMINS; // GitLab Access Token
const GITLAB_URL = process.env.GITLAB_URL; // GitLab main url
const SERVICE_CHAT_ID = process.env.SERVICE_CHAT_ID; // –ß–∞—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –±–æ—Ç–∞

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
const bot = new Bot(TOKEN);

// –í—Å–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏
let userList = [];

// –°–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
let excludedUsers = [];

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–π
const sessions = {};

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ –±–æ—Ç—É –æ—Ç –ª–∏–¥–æ–≤
let suggestions = [];

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
let loggingEnabled = true;

bot.api.setMyCommands(
  [
    { command: 'start', description: '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞' },
    { command: 'help', description: 'WTF' },
    { command: 'chatid', description: '–ü–æ–ª—É—á–∏—Ç—å ID —á–∞—Ç–∞' },
  ],
  { scope: { type: 'all_private_chats' } },
);

const sendServiceMessage = async (message, userId = null, username = null, ignoreLogging = false) => {
  try {
    if (!userId && !username) return await bot.api.sendMessage(SERVICE_CHAT_ID, message);

    if (ignoreLogging || loggingEnabled) {
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –∫–æ—Ç–æ—Ä—ã–π –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –¥–µ–π—Å—Ç–≤–∏–µ
      const fullMessage = `${message}\n–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: ${username ? '@' + username : `ID: ${userId}`}`;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–µ—Ä–≤–∏—Å–Ω—ã–π —á–∞—Ç
      await bot.api.sendMessage(SERVICE_CHAT_ID, fullMessage, {
        disable_web_page_preview: true,
      });
    }
  } catch (error) {
    await sendServiceMessage('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç');
  }
};

const loadUserList = async () => {
  try {
    const data = await fs.readFileSync(path.resolve('userList.json'));
    userList = JSON.parse(data);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ userList:', error);
    await sendServiceMessage('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞');
  }
};

const loadExcludedUsers = async () => {
  try {
    const data = await fs.readFileSync(path.resolve('excludedUsers.json'));
    excludedUsers = JSON.parse(data);
  } catch (error) {
    await sendServiceMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞');
  }
};

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ userList –≤ JSON —Ñ–∞–π–ª
const saveUserList = async () => {
  try {
    fs.writeFileSync(path.resolve('userList.json'), JSON.stringify(userList, null, 2));
  } catch (error) {
    await sendServiceMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤ —Ñ–∞–π–ª');
  }
};

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ excludedUsers –≤ JSON —Ñ–∞–π–ª
const saveExcludedUsers = async () => {
  try {
    fs.writeFileSync(path.resolve('excludedUsers.json'), JSON.stringify(excludedUsers, null, 2));
  } catch (error) {
    await sendServiceMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏—Å–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤ —Ñ–∞–π–ª');
  }
};

const loadSuggestions = async () => {
  try {
    const data = fs.readFileSync(path.resolve('suggestions.json'));
    suggestions = JSON.parse(data);
  } catch (error) {
    await sendServiceMessage('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞');
  }
};

const addUser = async (ctx, messengerNick, gitlabName) => {
  userList.push({ messengerNick, gitlabName });
  await saveUserList();
  await sendServiceMessage(
    `–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ ${messengerNick} - ${gitlabName} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤‚úÖüòä`,
    ctx.from.id,
    ctx.from.username,
  );
};

loadUserList();
loadExcludedUsers();
loadSuggestions();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏
const getSession = (chatId) => {
  if (!sessions[chatId]) {
    sessions[chatId] = {};
  }
  return sessions[chatId];
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
const isAdmin = async (ctx) => {
  const userId = ctx.from.id;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ adminIds (–ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
  if (ADMINS_IDS.includes(userId)) {
    return true;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã
  try {
    const chatMember = await ctx.getChatMember(userId);
    return chatMember.status === 'administrator' || chatMember.status === 'creator';
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', e);
    return false;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é
const showMenu = async (ctx) => {
  const keyboard = new InlineKeyboard()
    .text('‚úÖ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞', 'add_user')
    .row()
    .text('‚ùå –£–¥–∞–ª–∏—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞', 'remove_user')
    .row()
    .text('üî¥ –ò—Å–∫–ª—é—á–∏—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞', 'exclude_user')
    .row()
    .text('üü¢ –í–∫–ª—é—á–∏—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞', 'include_user')
    .row()
    .text('üåü –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤', 'list_users')
    .row()
    .text('‚ÑπÔ∏è HELP', 'help');

  if (ctx.chat.type === 'private') {
    if (loggingEnabled) {
      keyboard.row().text('üîï –í—ã–∫–ª—é—á–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ', 'disable_logging');
    } else {
      keyboard.row().text('üîî –í–∫–ª—é—á–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ', 'enable_logging');
    }
  }

  if ((ctx.chat.id.toString() === SERVICE_CHAT_ID.toString() || ctx.chat.type === 'private') && (await isAdmin(ctx))) {
    keyboard.row().text('üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –¥–æ—Ä–∞–±–æ—Ç–∫–µ', 'suggestions');
  }

  await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
    reply_markup: keyboard,
  });
};

const startBot = async (ctx) => {
  if (await isAdmin(ctx)) {
    await showMenu(ctx);
  } else {
    await ctx.reply('–£ –í–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∏–º –±–æ—Ç–æ–º.');
  }
};

const simpleChooseReviewers = async (ctx, message, authorNick) => {
  // –í—ã–±–æ—Ä –¥–≤—É—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö —Ä–µ–≤—å—é–≤–µ—Ä–æ–≤
  const availableReviewers = userList
    .filter((user) => user.messengerNick !== authorNick)
    .filter((user) => !excludedUsers.includes(user.messengerNick));
  const reviewers = getRandomElements(availableReviewers, 2);
  const reviewerMentions = reviewers.map((reviewer) => reviewer.messengerNick).join(' –∏ ');

  await ctx.reply(getEveningMessage(`–ù–∞–∑–Ω–∞—á–µ–Ω—ã —Ä–µ–≤—å—é–≤–µ—Ä—ã: ${reviewerMentions}`), {
    reply_to_message_id: ctx.message.message_id,
    parse_mode: 'HTML',
    disable_web_page_preview: true,
  });
};

const checkMergeRequestByGitlab = async (ctx, message, authorNick) => {
  const mrLinks = message.match(new RegExp(`https?:\/\/${GITLAB_URL}\/[\\w\\d\\-\\._~:\\/?#\\[\\]@!$&'()*+,;=]+`, 'g'));

  if (!mrLinks || !mrLinks.length) {
    return false; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º false, –µ—Å–ª–∏ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫ MR
  }

  let allAnswers = ''; // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ú–†–æ–≤
  let error = ''; // –°–æ–±–∏—Ä–∞–µ–º –æ—à–∏–±–∫–∏
  let success = false; // –§–ª–∞–≥ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

  // –µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ú–†–æ–≤ - –¥–æ–±–∞–≤–∏–ª —à—É—Ç–∫—É, —á—Ç–æ–±—ã –≤—Å–µ –∑–Ω–∞–ª–∏ —á—Ç–æ –±–æ—Ç –Ω–µ –∑–∞–≤–∏—Å,
  // —Ç–∞–∫ –∫–∞–∫ –Ω—É–∂–Ω–æ –≤—Ä–µ–º—è —á—Ç–æ–±—ã –ø—Ä–æ—á–µ–∫–∞—Ç—å –≤—Å–µ –ú–†—ã
  if (mrLinks.length > 4) {
    await ctx.reply(getRandomMessage(manyMrPhrases), { reply_to_message_id: ctx.message.message_id });
  }

  for (const mrUrl of mrLinks) {
    try {
      const response = await axiosInstance.get(mrUrl);

      if (response.status === 200) {
        const projectName = mrUrl.match(/\/([^\/]+)\/-\/merge_requests\//)?.[1];
        const mrId = mrUrl.match(/\/merge_requests\/(\d+)$/)?.[1];

        const projectSearchUrl = `https://gitlab.dpr.norbit.ru/api/v4/projects?search=${projectName}`;
        const { data: projectSearchUrlData, status: projectSearchUrlStatus } =
          await axiosInstance.get(projectSearchUrl);

        if (projectSearchUrlStatus !== 200) {
          error += `–ú–†: ${mrUrl}.\n–û—à–∏–±–∫–∞: –ù–µ —Å–º–æ–≥ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API Gitlab`;
          return false;
        }
        let reallyProject = null;
        for (const project of projectSearchUrlData) {
          if (
            project?.path_with_namespace?.toLowerCase()?.includes('andrey.singaevskiy') ||
            project?.path_with_namespace?.toLowerCase()?.includes('bpmsoft')
          ) {
            continue;
          }
          reallyProject = project;
          break;
        }

        const projectId = reallyProject?.id;
        const mrStatusUrl = `https://${GITLAB_URL}/api/v4/projects/${projectId}/merge_requests/${mrId}`;
        const { data: mrStatusResponse, status: mrStatusStatus } = await axiosInstance.get(mrStatusUrl);

        if (mrStatusStatus !== 200 || mrStatusStatus === 404) {
          error += `–ú–†: ${mrUrl}.\n–û—à–∏–±–∫–∞: –ù–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ú–†–∞ –≤ API Gitlab`;
          return false;
        }

        const mergeRequestTitle = mrStatusResponse?.title;
        const mergeRequestState = mrStatusResponse?.state;
        const mergeRequestPipelineFailed = mrStatusResponse?.pipeline?.status === 'failed';

        if (!!mergeRequestPipelineFailed) {
          allAnswers += '\nüö®–í –¥–∞–Ω–Ω–æ–º –ú—Ä–µ —É–ø–∞–ª pipeline. –ü–æ—Å–º–æ—Ç—Ä–∏ –≤ —á–µ–º –ø—Ä–æ–±–ª–µ–º–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!üö®\n';
        }

        if (mergeRequestTitle?.toLowerCase()?.startsWith('draft:')) {
          allAnswers += `\n${mrUrl}\n–ú–† –≤ –¥—Ä–∞—Ñ—Ç–µ! –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞üòâ\nüö®–†–µ–≤—å—é–≤–µ—Ä—ã –Ω–µ –Ω–∞–∑–Ω–∞—á–∞—é—Ç—Å—è –Ω–∞ MR—ã –≤ —Å—Ç–∞—Ç—É—Å–µ 'Draft'üö®\n`;
          success = true;
          continue;
        }

        if (mergeRequestState?.toLowerCase() === 'merged') {
          allAnswers += `\n${mrUrl}\n–≠—Ç–æ—Ç –ú–† —É–∂–µ –≤–ª–∏—Ç) –ú–æ–∂–µ—Ç —Å—Å—ã–ª–∫–∞ –Ω–µ —Ç–∞?ü§î\n`;
          success = true;
          continue;
        }

        if (mergeRequestState?.toLowerCase() === 'closed') {
          allAnswers += `\n${mrUrl}\n–≠—Ç–æ—Ç –ú–† –∑–∞–∫—Ä—ã—Ç) –ú–æ–∂–µ—Ç —Å—Å—ã–ª–∫–∞ –Ω–µ —Ç–∞?ü§î\n`;
          success = true;
          continue;
        }
        const approvalRulesUrl = `https://${GITLAB_URL}/api/v4/projects/${projectId}/merge_requests/${mrId}/approval_rules`;
        const { data: approvalRulesUrlResponse, status: approvalRulesUrlStatus } =
          await axiosInstance.get(approvalRulesUrl);
        if (approvalRulesUrlStatus !== 200) {
          error += `–ú–†: ${mrUrl}.\n–û—à–∏–±–∫–∞: –ù–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–≤—å—é–≤–µ—Ä–æ–≤ –≤ API Gitlab`;
          return false;
        }

        let leadApprovers = [];
        let simpleApprovers = [];
        let leadRequired = false;
        const activeUsers = userList.filter((user) => !excludedUsers.includes(user.messengerNick));

        for (const rule of approvalRulesUrlResponse) {
          if (!rule.name || !rule.approvals_required || !rule.eligible_approvers) {
            continue;
          }

          if (rule?.name?.toLowerCase() === 'lead') {
            leadRequired = rule.approvals_required > 0;
            leadApprovers = rule.eligible_approvers.filter((approver) =>
              activeUsers.some((user) => user.gitlabName === approver.username && user.messengerNick !== authorNick),
            );
          } else if (rule.name.startsWith('Check MR')) {
            simpleApprovers = rule.eligible_approvers.filter((approver) =>
              activeUsers.some((user) => user.gitlabName === approver.username && user.messengerNick !== authorNick),
            );
          }
        }

        if (leadApprovers.length === 0 && simpleApprovers.length === 0) {
          allAnswers += `\n${mrUrl}\nüö®–ù–∏–∫—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–∑ —Ä–µ–≤—å—é–≤–µ—Ä–æ–≤ –∏–ª–∏ –º–æ–∂–µ—Ç —Ç—ã —Å–∫–∏–Ω—É–ª –µ–≥–æ –Ω–µ –≤ —Ç–æ—Ç —á–∞—Ç–∏–∫?ü§îüòâüö®\n`;
          error += `–ú–†: ${mrUrl}.\n–û—à–∏–±–∫–∞: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–≤—å—é–≤–µ—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö API Gitlab`;
          continue;
        }

        let selectedLeadNick = null;
        let selectedCheckMrNick = null;
        let leadUnavailableMessage = '';

        // –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–µ–Ω –ª–∏ –∞–ø—Ä—É–≤ –ª–∏–¥–∞
        if (leadRequired && leadApprovers.length > 0) {
          selectedLeadNick = leadApprovers[Math.floor(Math.random() * leadApprovers.length)].username;
        } else if (leadRequired && leadApprovers.length === 0) {
          leadUnavailableMessage =
            '\n–í –¥–∞–Ω–Ω—ã–π –ú–† —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–≤—å—é–≤–µ—Ä –∏–∑ –∫–æ–º–∞–Ω–¥—ã Lead, –Ω–æ —ç—Ç–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–µ–≥–æ–¥–Ω—è –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç.üòî';
          await sendServiceMessage(
            `–ú–†: ${mrUrl}.\n–û—à–∏–±–∫–∞: –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–≤—å—é–≤–µ—Ä–æ–≤ –∏–∑ –∫–æ–º–∞–Ω–¥—ã Lead. –ü—Ä–æ—Å—å–±–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—åüòä`,
          );
        }

        if (simpleApprovers.length > 0) {
          let remainingApprovers = simpleApprovers.filter((user) => user.username !== selectedLeadNick);
          if (remainingApprovers.length > 0) {
            selectedCheckMrNick = remainingApprovers[Math.floor(Math.random() * remainingApprovers.length)].username;
          }
        }

        if (!selectedLeadNick) {
          selectedLeadNick = selectedCheckMrNick;
          // –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ä–µ–≤—å—é–≤–µ—Ä–æ–≤, –∏—Å–∫–ª—é—á–∞—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ
          let remainingApprovers = simpleApprovers.filter(
            (user) =>
              activeUsers.find((activeUser) => activeUser.gitlabName === user.username).messengerNick !==
              selectedLeadNick,
          );

          if (remainingApprovers.length > 0) {
            const selectedCheckMr = remainingApprovers[Math.floor(Math.random() * remainingApprovers.length)];
            selectedCheckMrNick = activeUsers.find(
              (user) => user.gitlabName === selectedCheckMr.username,
            ).messengerNick;
          }
        }
        const messengerNickLead = activeUsers.find((lead) => lead.gitlabName === selectedLeadNick).messengerNick;
        const messengerNickSimpleReviewer = activeUsers.find(
          (lead) => lead.gitlabName === selectedCheckMrNick,
        ).messengerNick;

        allAnswers += `\n${mrUrl}\n–ù–∞–∑–Ω–∞—á–µ–Ω—ã —Ä–µ–≤—å—é–≤–µ—Ä—ã: ${messengerNickLead} –∏ ${messengerNickSimpleReviewer}${leadUnavailableMessage}\n`;
        success = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
      }
    } catch (errors) {
      await sendServiceMessage(`–ú–†: ${mrUrl}.\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ API Gitlab`);
      return false; // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false
    }
  }

  if (success) {
    await ctx.reply(getEveningMessage(allAnswers), {
      reply_to_message_id: ctx.message.message_id,
      parse_mode: 'HTML',
      disable_web_page_preview: true,
    });
    if (!!error) {
      await sendServiceMessage(`–û—à–∏–±–∫–∏ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ä–µ–≤—å—é–≤–µ—Ä–æ–≤:\n\n${error}`);
    }
    return true; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true, –µ—Å–ª–∏ —É–¥–∞–ª–æ—Å—å —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–µ–≤—å—é–≤–µ—Ä–æ–≤
  } else {
    await sendServiceMessage(`–û—à–∏–±–∫–∏ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –≥–∏—Ç–ª–∞–±—É:\n\n${error}`);
    return false;
  }
};

const assignReviewers = async (ctx, message, authorNick) => {
  const availableReviewers = userList
    .filter((user) => user.messengerNick !== authorNick)
    .filter((user) => !excludedUsers.includes(user.messengerNick));

  if (availableReviewers.length === 0) {
    await ctx.reply(getEveningMessage(`–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–≤—å—é–≤–µ—Ä–æ–≤.ü•¥\n–°–µ–π—á–∞—Å —Ä–∞–∑–±–µ—Ä–µ–º—Å—è!`), {
      reply_to_message_id: ctx.message.message_id,
      disable_web_page_preview: true,
    });
    await sendServiceMessage(`${message}.\n\n–ü–æ—á–µ–º—É-—Ç–æ –Ω–µ—Ç —Ä–µ–≤—å—é–≤–µ—Ä–æ–≤. –ü—Ä–æ—Å—å–±–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—åüòä`);
    return;
  }

  if (availableReviewers.length === 1) {
    const reviewer = getRandomElements(availableReviewers, 1);
    await ctx.reply(
      getEveningMessage(
        `–ù–∞–∑–Ω–∞—á–µ–Ω –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ä–µ–≤—å—é–≤–µ—Ä: ${reviewer[0].messengerNick}. –¢—Ä–µ–±—É–µ—Ç—Å—è –µ—â–µ 1 —Ä–µ–≤—å—é–≤–µ—Ä.üò≥`,
      ),
      {
        reply_to_message_id: ctx.message.message_id,
        disable_web_page_preview: true,
      },
    );
    await sendServiceMessage(`${message}.\n\n–ü–æ—á–µ–º—É-—Ç–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–µ–≤—å—é–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ—Å—å–±–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—åüòä`);
    return;
  }

  const mrLinks = message.match(new RegExp(`https?:\/\/${GITLAB_URL}\/[\\w\\d\\-\\._~:\\/?#\\[\\]@!$&'()*+,;=]+`, 'g'));
  if (!mrLinks || !mrLinks.length) {
    return await sendServiceMessage(`${message}\n\n–ö–∞–∫–∞—è-—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å —Å—ã–ª–∫–æ–π –Ω–∞ –ú–†. –ü—Ä–æ—Å—å–±–∞ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å!üòä`);
  }

  // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–≤—å—é–≤–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ GitLab
  const status = await checkMergeRequestByGitlab(ctx, message, authorNick);

  if (status) {
    return; // –ï—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–≤—å—é–≤–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ GitLab, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
  }

  // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å GitLab, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥
  await simpleChooseReviewers(ctx, message, authorNick);
};

const excludeUser = async (ctx, username) => {
  if (!excludedUsers.includes(username)) {
    excludedUsers.push(username);
    if (loggingEnabled) {
      await sendServiceMessage(`–í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω: ${username}‚ùå`, ctx.from.id, ctx.from.username);
    }
    await saveExcludedUsers();
  }
};

const includeUser = async (ctx, username) => {
  const index = excludedUsers.indexOf(username);
  if (index !== -1) {
    excludedUsers.splice(index, 1);
    if (loggingEnabled) {
      await sendServiceMessage(`–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ ${username} –∞–∫—Ç–∏–≤–µ–Ω‚úÖ`, ctx.from.id, ctx.from.username);
    }
    await saveExcludedUsers();
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const listUsers = async (ctx) => {
  const activeUsers = userList.filter((user) => !excludedUsers.includes(user.messengerNick));
  const allUsers = userList.map((user) => `${user.messengerNick} - ${user.gitlabName}`).join('\n');
  const excluded = userList
    .filter((user) => excludedUsers.includes(user.messengerNick))
    .map((user) => `${user.messengerNick} - ${user.gitlabName}`)
    .join('\n');
  const active = activeUsers.map((user) => `${user.messengerNick} - ${user.gitlabName}`).join('\n');

  const response = `–í—Å–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏:\n${allUsers}\n\n–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏:\n${active}\n\n–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏:\n${excluded}`;
  await ctx.reply(response);
  await showMenu(ctx);
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è
const showUserList = async (ctx, action) => {
  let users;
  if (action === 'remove_user') {
    users = userList; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≤–∫–ª—é—á–∞—è –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö
  } else if (action === 'exclude_user') {
    users = userList.filter((user) => !excludedUsers.includes(user.messengerNick));
  } else if (action === 'include_user') {
    users = userList.filter((user) => excludedUsers.includes(user.messengerNick));
  }

  if (!users || users.length === 0) {
    await ctx.reply('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.');
    await showMenu(ctx);
    return;
  }

  const keyboard = new InlineKeyboard();
  users.forEach((user) => {
    keyboard.row().text(`${user.messengerNick} - ${user.gitlabName}`, `${action}:${user.messengerNick}`);
  });

  await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞:', {
    reply_markup: keyboard,
  });
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
const helpCommand = async (ctx) => {
  const helpText =
    '/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n' +
    '/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n' +
    '<b><i>–î–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞</i></b> - –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤ —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n\n' +
    '<b><i>–£–¥–∞–ª–∏—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞</i></b> - –£–¥–∞–ª–∏—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É–¥–∞–ª–∏—Ç—å —É–≤–æ–ª–µ–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞)\n\n' +
    '<b><i>–ò—Å–∫–ª—é—á–∏—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞</i></b> - –°–¥–µ–ª–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –æ—Ç–ø—É—Å–∫–µ –∏–ª–∏ –Ω–∞ –±–æ–ª—å–Ω–∏—á–Ω–æ–º)\n\n' +
    '<b><i>–í–∫–ª—é—á–∏—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞</i></b> - –í–µ—Ä–Ω—É—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤ —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n\n' +
    '<b><i>–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤</i></b> - –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, –≤ —Ç–æ–º —á–∏—Å–ª–µ –∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤. –†–µ–≤—å—é–≤–µ—Ä—ã –≤—ã–±–∏—Ä–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n\n' +
    '<b><i>–í–∫–ª—é—á–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ</i></b> - –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–∏—Å–∞—Ç—å –±–æ—Ç—É –≤ –ª–∏—á–∫—É. –í–∫–ª—é—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≥–∏—Ç–ª–∞–±—É(–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è).';

  await ctx.reply(helpText, { parse_mode: 'HTML' });
  await showMenu(ctx);
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.command('start', async (ctx) => {
  await startBot(ctx);
});

bot.command('start', async (ctx) => await startBot(ctx));

bot.command('help', async (ctx) => {
  if (await isAdmin(ctx)) {
    await helpCommand(ctx);
  } else {
    await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∏–º –±–æ—Ç–æ–º.');
  }
});

bot.command('chatid', async (ctx) => {
  if (await isAdmin(ctx)) {
    const chatId = ctx.chat.id;
    await ctx.reply(`Chat ID: ${chatId}`);
  } else {
    await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∏–º –±–æ—Ç–æ–º.');
  }
});

bot.on(':voice', async (ctx) => {
  await ctx.reply('–ê–π –Ω–µ—Ö–æ—Ä–æ—à–æ –≥–æ–ª–æ—Å–æ–≤—ã–µ –≤ —á–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å!ü•¥', { reply_to_message_id: ctx.message.message_id });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å MR
bot.on('::url').filter(checkMr, async (ctx) => {
  const match = ctx.message?.text?.toLowerCase()?.includes('mr:');
  if (match) {
    const { text, entities } = ctx.message;

    // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫
    let urls = '';

    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º entities –∏ –∏—â–µ–º —Å—Å—ã–ª–∫–∏(–º–æ–≥—É—Ç –±—ã—Ç—å —Å–∫—Ä—ã—Ç—ã –∑–∞ richText)
    entities.forEach((entity) => {
      if (entity.type === 'url') {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫—É –∏–∑ —Ç–µ–∫—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è offset –∏ length
        const url = text.substring(entity.offset, entity.offset + entity.length);
        urls += ' ' + url;
      } else if (entity.type === 'text_link') {
        // –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–∞—è —Å—Å—ã–ª–∫–∞, –±–µ—Ä–µ–º –µ—ë –Ω–∞–ø—Ä—è–º—É—é –∏–∑ entity
        urls += ' ' + entity.url;
      }
    });

    // –ê–≤—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
    const username = ctx.from.username ? `@${ctx.from.username}` : ctx.from.first_name;
    // –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–µ–≤—å—é–≤–µ—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ MR
    await assignReviewers(ctx, urls, username);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.on('msg:text', async (ctx) => {
  const session = getSession(ctx.chat.id);

  if (session.awaitingSuggestionsInput) {
    const suggestion = ctx.message.text;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª JSON
    suggestions.push({
      userId: ctx.from.id,
      username: ctx.from.username,
      suggestion,
      timestamp: new Date().toISOString(),
    });

    fs.writeFileSync(path.resolve('suggestions.json'), JSON.stringify(suggestions, null, 2));

    await ctx.reply('–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–µ—Ä–µ–¥–∞–Ω—ã!üòò');
    session.awaitingSuggestionsInput = false;
    await showMenu(ctx);
    return;
  }

  // –µ—Å–ª–∏ –Ω–µ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (!session.awaitingUserInput) return;

  const [telegramNick, gitlabNick] = ctx.message.text.split(' ');

  if (!telegramNick || !gitlabNick || ctx.message.text.split(' ').length !== 2) {
    await ctx.reply(
      '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "@TelegramNick GitLabNick", –Ω–∞–ø—Ä–∏–º–µ—Ä @ivanov Ivan.Ivanov',
    );
    return;
  }

  const exists = userList.find((user) => user.messengerNick === telegramNick);

  if (!exists) {
    await addUser(ctx, telegramNick, gitlabNick);
    await ctx.reply(`–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ ${telegramNick} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Å GitLab –Ω–∏–∫–æ–º ${gitlabNick}.`);
  } else {
    await ctx.reply(`–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ ${telegramNick} —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ.`);
  }

  session.awaitingUserInput = false;
  await listUsers(ctx);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
bot.callbackQuery(/(remove_user|exclude_user|include_user):(.+)/, async (ctx) => {
  try {
    const [action, username] = ctx.callbackQuery.data.split(':');

    const userIndex = userList.findIndex((user) => user.messengerNick === username);

    if (userIndex !== -1) {
      let responseMessage = '';

      switch (action) {
        case 'remove_user':
          userList.splice(userIndex, 1);
          await saveUserList();
          if (loggingEnabled) {
            await sendServiceMessage(
              `–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ ${username} –£–î–ê–õ–ï–ù –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤‚ùåüö®üö®üö®`,
              ctx.from.id,
              ctx.from.username,
            );
          }
          if (excludedUsers.includes(username)) {
            await includeUser(ctx, username);
          }
          responseMessage = `–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ ${username} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.`;
          break;
        case 'exclude_user':
          if (!excludedUsers.includes(username)) {
            await excludeUser(ctx, username);
            responseMessage = `–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ ${username} –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.`;
          }
          break;
        case 'include_user':
          if (excludedUsers.includes(username)) {
            await includeUser(ctx, username);
            responseMessage = `–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ ${username} –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ —Å–ø–∏—Å–æ–∫.`;
          }
          break;
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
      if (responseMessage) {
        await ctx.editMessageText(responseMessage);
      }
      await listUsers(ctx);
    } else {
      console.error('User not found:', username);
    }
  } catch (error) {
    console.error('Error handling callback query:', error);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
bot.callbackQuery(/.*/, async (ctx) => {
  const action = ctx.callbackQuery.data;
  const session = getSession(ctx.chat.id);

  // –ï—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω
  if (!(await isAdmin(ctx))) {
    await ctx.answerCallbackQuery({ text: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∏–º –±–æ—Ç–æ–º.', show_alert: true });
    return;
  }

  // –ï—Å–ª–∏ –±–æ—Ç –∂–¥–µ—Ç —Ç–µ–∫—Å—Ç, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –¥—Ä—É–≥—É—é –∫–Ω–æ–ø–∫—É, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
  if (session.awaitingSuggestionsInput) {
    session.awaitingSuggestionsInput = false;
  }

  switch (action) {
    case 'list_users':
      await listUsers(ctx);
      break;
    case 'add_user':
      session.awaitingUserInput = true;
      const cancelKeyboard = new InlineKeyboard().text('–û—Ç–º–µ–Ω–∞', 'cancel');
      await ctx.reply(
        '–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n "@TelegramNick GitLabNick"\n –Ω–∞–ø—Ä–∏–º–µ—Ä @Ivanov Ivan.Ivanov',
        {
          reply_markup: cancelKeyboard,
        },
      );
      break;
    case 'remove_user':
    case 'exclude_user':
    case 'include_user':
      await showUserList(ctx, action);
      break;
    case 'enable_logging':
      loggingEnabled = true;
      await ctx.reply('–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ.');
      await sendServiceMessage(`–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –æ—Ç–ª–∞–¥–∫–∏ –≤–∫–ª—é—á–µ–Ω–æ‚úÖ`, ctx.from.id, ctx.from.username, true);
      await showMenu(ctx);
      break;
    case 'disable_logging':
      loggingEnabled = false;
      await ctx.reply('–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ.');
      await sendServiceMessage(`–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –æ—Ç–ª–∞–¥–∫–∏ –≤—ã–∫–ª—é—á–µ–Ω–æ‚ùå`, ctx.from.id, ctx.from.username, true);
      await showMenu(ctx);
      break;
    case 'cancel':
      session.awaitingUserInput = false;
      await ctx.reply('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
      await showMenu(ctx);
      break;
    case 'help':
      await helpCommand(ctx);
      break;
    case 'suggestions':
      session.awaitingSuggestionsInput = true;
      const cancelSuggestionsKeyboard = new InlineKeyboard().text('–û—Ç–º–µ–Ω–∞', 'cancel_suggestions');
      await ctx.reply('–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –¥–æ—Ä–∞–±–æ—Ç–∫–µ. –Ø –∏—Ö –ø–µ—Ä–µ–¥–∞–º —Ö–æ–∑—è–∏–Ω—É. üòà', {
        reply_markup: cancelSuggestionsKeyboard,
      });
      break;
    case 'cancel_suggestions':
      session.awaitingSuggestionsInput = false;
      await ctx.reply('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
      await showMenu(ctx);
      break;
  }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.start();
