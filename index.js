import {Bot, InlineKeyboard} from "grammy";
import dotenv from "dotenv";
import {checkMr, getEveningMessage, getRandomElements, helpMessage, startMessage} from "./helpers.js";
import {adminIds, userList} from "./constants.js";

dotenv.config();

const TOKEN = process.env.BOT_API_KEY; // –¢–æ–∫–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç–∞
const GITLAB_TOKEN = process.env.GITLAB_ACCESS_TOKEN; // GitLab Access Token

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
const bot = new Bot(TOKEN);

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–π
const sessions = {};

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
let loggingEnabled = false;

// –°–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
const excludedUsers = [];

bot.api.setMyCommands([
	{command: 'start', description: '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞'},
	{command: 'help', description: 'WTF'}
], {scope: {type: 'all_private_chats'}});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.command('start', async (ctx) => await startBot(ctx));

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏
const getSession = chatId => {
	if (!sessions[chatId]) {
		sessions[chatId] = {};
	}
	return sessions[chatId];
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
const isAdmin = async ctx => {
	const userId = ctx.from.id;
	
	// –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ adminIds (–ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
	if (adminIds.includes(userId)) {
		return true;
	}
	
	// –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã
	try {
		const chatMember = await ctx.getChatMember(userId);
		return chatMember.status === 'administrator' || chatMember.status === 'creator';
	} catch (e) {
		console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", e);
		return false;
	}
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é
const showMenu = async ctx => {
	const keyboard = new InlineKeyboard()
		.text("‚úÖ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞", "add_user")
		.row()
		.text("‚ùå –£–¥–∞–ª–∏—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞", "remove_user")
		.row()
		.text("üî¥ –ò—Å–∫–ª—é—á–∏—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞", "exclude_user")
		.row()
		.text("üü¢ –í–∫–ª—é—á–∏—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞", "include_user")
		.row()
		.text("üåü –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤", "list_users")
		.row()
		.text("‚ÑπÔ∏è HELP", "help");
	
	if (ctx.chat.type === 'private') {
		if (loggingEnabled) {
			keyboard.row().text("üîï –í—ã–∫–ª—é—á–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ", "disable_logging");
		} else {
			keyboard.row().text("üîî –í–∫–ª—é—á–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ", "enable_logging");
		}
	}
	
	await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
		reply_markup: keyboard
	});
};

const startBot = async (ctx) => {
	if (await isAdmin(ctx)) {
		await showMenu(ctx);
	} else {
		await ctx.reply('–£ –í–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∏–º –±–æ—Ç–æ–º.');
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–µ–≤—å—é–≤–µ—Ä–æ–≤
async function assignReviewers(ctx, message, authorNick) {
	// –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–µ–≤—å—é–≤–µ—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ MR URL.
	// –ù–∞–ø—Ä–∏–º–µ—Ä, –≤—ã–±—Ä–∞—Ç—å –¥–≤—É—Ö —Ä–µ–≤—å—é–≤–µ—Ä–æ–≤ –∏–∑ userList, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ excludedUsers.
	const availableReviewers = userList.filter(user => user.messengerNick !== authorNick).filter(user => !excludedUsers.includes(user.messengerNick));
	console.log('availableReviewers', availableReviewers);
	
	if (availableReviewers.length === 0) {
		await ctx.reply(getEveningMessage(`–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–≤—å—é–≤–µ—Ä–æ–≤.ü•¥`), {
			reply_to_message_id: ctx.message.message_id,
			disable_web_page_preview: true
		});
		return;
	}
	
	if (availableReviewers.length === 1) {
		const reviewer = getRandomElements(availableReviewers, 1);
		console.log('reviewer', reviewer);
		await ctx.reply(getEveningMessage(`–ù–∞–∑–Ω–∞—á–µ–Ω –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ä–µ–≤—å—é–≤–µ—Ä: ${reviewer[0].messengerNick}. –¢—Ä–µ–±—É–µ—Ç—Å—è –µ—â–µ 1 –∞–ø—Ä—É–≤–µ—Ä.üò≥`), {
			reply_to_message_id: ctx.message.message_id,
			disable_web_page_preview: true
		});
		return;
	}
	
	// –í—ã–±–æ—Ä –¥–≤—É—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö —Ä–µ–≤—å—é–≤–µ—Ä–æ–≤
	const reviewers = getRandomElements(availableReviewers, 2);
	const reviewerMentions = reviewers.map(reviewer => reviewer.messengerNick).join(' –∏ ');
	
	await ctx.reply(getEveningMessage(`–ù–∞–∑–Ω–∞—á–µ–Ω—ã —Ä–µ–≤—å—é–≤–µ—Ä—ã –¥–ª—è MR: ${reviewerMentions}`), {
		reply_to_message_id: ctx.message.message_id,
		parse_mode: "HTML",
		disable_web_page_preview: true
	});
}

bot.on('msg:text').filter(startMessage, async (ctx) => await startBot(ctx))
bot.on('msg:text').filter(helpMessage, async (ctx) => await helpCommand(ctx))

bot.on(':voice', async ctx => {
	await ctx.reply('–ê–π –Ω–µ—Ö–æ—Ä–æ—à–æ –≥–æ–ª–æ—Å–æ–≤—ã–µ –≤ —á–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å!ü•¥', {reply_to_message_id: ctx.message.message_id})
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å MR
bot.on('::url').filter(checkMr, async (ctx) => {
	const message = ctx.message.text.toLowerCase();
	console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å MR', message);
	const match = message.includes('mr:');
	if (match) {
		// –ê–≤—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
		const username = ctx.from.username ? `@${ctx.from.username}` : ctx.from.first_name;
		// –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–µ–≤—å—é–≤–µ—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ MR
		await assignReviewers(ctx, message, username);
	}
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.on('msg:text', async (ctx) => {
	const session = getSession(ctx.chat.id);
	// –µ—Å–ª–∏ –Ω–µ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	if (!session.awaitingUserInput) return
	console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', session);
	
	const [telegramNick, gitlabNick] = ctx.message.text.split(' ');
	
	if (!telegramNick || !gitlabNick || ctx.message.text.split(' ').length !== 2) {
		await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "@TelegramNick GitLabNick", –Ω–∞–ø—Ä–∏–º–µ—Ä @ivanov Ivan.Ivanov');
		return;
	}
	
	const exists = userList.find(user => user.messengerNick === telegramNick);
	
	if (!exists) {
		userList.push({messengerNick: telegramNick, gitlabName: gitlabNick});
		await ctx.reply(`–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ ${telegramNick} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Å GitLab –Ω–∏–∫–æ–º ${gitlabNick}.`);
	} else {
		await ctx.reply(`–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ ${telegramNick} —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ.`);
	}
	
	session.awaitingUserInput = false;
	await listUsers(ctx);
});


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const listUsers = async ctx => {
	const activeUsers = userList.filter(user => !excludedUsers.includes(user.messengerNick));
	const allUsers = userList.map(user => `${user.messengerNick} - ${user.gitlabName}`).join('\n');
	const excluded = userList.filter(user => excludedUsers.includes(user.messengerNick)).map(user => `${user.messengerNick} - ${user.gitlabName}`).join('\n');
	const active = activeUsers.map(user => `${user.messengerNick} - ${user.gitlabName}`).join('\n');
	
	const response = `–í—Å–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏:\n${allUsers}\n\n–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏:\n${active}\n\n–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏:\n${excluded}`;
	await ctx.reply(response);
	await showMenu(ctx);
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è
const showUserList = async (ctx, action) => {
	let users;
	if (action === 'remove_user') {
		users = userList; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≤–∫–ª—é—á–∞—è –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö
	} else if (action === 'exclude_user') {
		users = userList.filter(user => !excludedUsers.includes(user.messengerNick));
	} else if (action === 'include_user') {
		users = userList.filter(user => excludedUsers.includes(user.messengerNick));
	}
	
	if (!users || users.length === 0) {
		await ctx.reply('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.');
		await showMenu(ctx);
		return;
	}
	
	const keyboard = new InlineKeyboard();
	users.forEach(user => {
		keyboard.row().text(`${user.messengerNick} - ${user.gitlabName}`, `${action}:${user.messengerNick}`);
	});
	
	await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞:', {
		reply_markup: keyboard
	});
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
bot.callbackQuery(/(remove_user|exclude_user|include_user):(.+)/, async (ctx) => {
	console.log('callbackQuery', ctx)
	try {
		const [action, username] = ctx.callbackQuery.data.split(':');
		console.log('Parsed action:', action);
		console.log('Parsed username:', username);
		
		const userIndex = userList.findIndex(user => user.messengerNick === username);
		console.log('User index:', userIndex);
		
		if (userIndex !== -1) {
			const user = userList[userIndex];
			console.log('Found user:', user);
			
			switch (action) {
				case 'remove_user':
					userList.splice(userIndex, 1);
					if (excludedUsers.includes(username)) {
						excludedUsers.splice(excludedUsers.indexOf(username), 1);
					}
					await ctx.editMessageText(`–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ ${username} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.`);
					break;
				case 'exclude_user':
					if (!excludedUsers.includes(username)) {
						excludedUsers.push(username);
						await ctx.editMessageText(`–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ ${username} –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.`);
					}
					break;
				case 'include_user':
					if (excludedUsers.includes(username)) {
						excludedUsers.splice(excludedUsers.indexOf(username), 1);
						await ctx.editMessageText(`–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ ${username} –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ —Å–ø–∏—Å–æ–∫.`);
					}
					break;
			}
			
			await listUsers(ctx);
		} else {
			console.error('User not found:', username);
		}
	} catch (error) {
		console.error('Error handling callback query:', error);
	}
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
bot.callbackQuery(/.*/, async (ctx) => {
	const action = ctx.callbackQuery.data;
	const session = getSession(ctx.chat.id);
	
	console.log('bot.callbackQuery(/.', action);
	
	// –ï—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω
	if (!(await isAdmin(ctx))) {
		await ctx.answerCallbackQuery({text: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∏–º –±–æ—Ç–æ–º.', show_alert: true});
		return;
	}
	
	switch (action) {
		case 'list_users':
			await listUsers(ctx);
			break;
		case 'add_user':
			session.awaitingUserInput = true;
			const cancelKeyboard = new InlineKeyboard().text("–û—Ç–º–µ–Ω–∞", "cancel");
			await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n "@TelegramNick GitLabNick"\n –Ω–∞–ø—Ä–∏–º–µ—Ä @Ivanov Ivan.Ivanov', {
				reply_markup: cancelKeyboard
			});
			break;
		case 'remove_user':
		case 'exclude_user':
		case 'include_user':
			await showUserList(ctx, action);
			break;
		case 'enable_logging':
			loggingEnabled = true;
			await ctx.reply('–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ.');
			await showMenu(ctx);
			break;
		case 'disable_logging':
			loggingEnabled = false;
			await ctx.reply('–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ.');
			await showMenu(ctx);
			break;
		case 'cancel':
			session.awaitingUserInput = false;
			await ctx.reply('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
			await showMenu(ctx);
			break;
		case 'help':
			await helpCommand(ctx);
			break;
	}
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
async function helpCommand(ctx) {
	const helpText = (
		"/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n" +
		"/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n" +
		"<b><i>–î–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞</i></b> - –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤ —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n\n" +
		"<b><i>–£–¥–∞–ª–∏—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞</i></b> - –£–¥–∞–ª–∏—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É–¥–∞–ª–∏—Ç—å —É–≤–æ–ª–µ–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞)\n\n" +
		"<b><i>–ò—Å–∫–ª—é—á–∏—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞</i></b> - –°–¥–µ–ª–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –æ—Ç–ø—É—Å–∫–µ –∏–ª–∏ –Ω–∞ –±–æ–ª—å–Ω–∏—á–Ω–æ–º)\n\n" +
		"<b><i>–í–∫–ª—é—á–∏—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞</i></b> - –í–µ—Ä–Ω—É—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤ —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n\n" +
		"<b><i>–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤</i></b> - –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, –≤ —Ç–æ–º —á–∏—Å–ª–µ –∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤. –ê–ø—Ä—É–≤–µ—Ä—ã –≤—ã–±–∏—Ä–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n\n" +
		"<b><i>–í–∫–ª—é—á–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ</i></b> - –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–∏—Å–∞—Ç—å –±–æ—Ç—É –≤ –ª–∏—á–∫—É. –í–∫–ª—é—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≥–∏—Ç–ª–∞–±—É(–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)."
	);
	
	await ctx.reply(helpText, {parse_mode: 'HTML'});
	await showMenu(ctx);
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.start();
